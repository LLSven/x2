
///////////////////////////////////
/////D E P R E C A T E D /////////
//////////////////////////////////

//////////////////////////////////////////////////////////////////////////////////////
////////////F O R       H I S T O R Y       R E A S O N /////////////////////////////
///////////N E V E R     R E F E R E N C E D ///////////////////////////////////////
/////////////////////////////////////////////////////////////////////////////////////

///////////////////////////////////////////////////////////////////////////////////
///// O R I G I N A L       R E F E R E N C E       L O O K S      L I K E  ///////
///// T H E      F O L L O W I N G //////////////////////////////////////////////
//////////////////////////////////////////////////////////////////////////////////
//#if defined(CODE64)
//#define __DEF_SIZE_TYPE u64_t
//#define __DEF_ALIGNMENT sizeof(u64_t)
//#include <preprocessor_functions/MemoryManager_macros.h.RAW>
//#define __DEF_SIZE_TYPE size_t
//#define __DEF_ALIGNMENT sizeof(size_t)
//#include <preprocessor_functions/MemoryManager_macros.h.RAW>
//#endif
//
//#if defined(CODE32) ||defined(CODE32USER)|| defined(CODE64)
//#define __DEF_SIZE_TYPE u32_t
//#define __DEF_ALIGNMENT 4
//#include <preprocessor_functions/MemoryManager_macros.h.RAW>
//#endif
//
//#if defined(CODE16) || defined(CODE32) ||defined(CODE32USER)|| defined(CODE64)
//#define __DEF_SIZE_TYPE u16_t
//#define __DEF_ALIGNMENT 2
//#include <preprocessor_functions/MemoryManager_macros.h.RAW>
//#endif

///**
// * @param __DEF_SIZE_TYPE
// * @param __DEF_ALIGNMENT
// */

//#if !defined(__DEF_SIZE_TYPE) || !defined(__DEF_ALIGNMENT)
//#error "please define __DEF_SIZE_TYPE and/or __DEF_ALIGNMENT"
//#endif

#if defined(IDE_MODE)
#include <MemoryManager.h>
#endif

//===class: LinearSourceDescriptor
LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::LinearSourceDescriptor(__SizeType start,__SizeType limit):
 start(start),limit(limit)
 {

 }
template <class __AnotherSizeType,int __AnotherAlignment>
LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::
LinearSourceDescriptor(const LinearSourceDescriptor<__AnotherSizeType,__AnotherAlignment> & rhs):
	start((__DEF_SIZE_TYPE)rhs.getStart()),
	limit((__DEF_SIZE_TYPE)rhs.getLimit())
{
	
}
template <class __AnotherSizeType,int __AnotherAlignment>
typename LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::__LinearSourceDescriptor& 
LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::
operator=(const LinearSourceDescriptor<__AnotherSizeType,__AnotherAlignment> & rhs)
{
	start = (__DEF_SIZE_TYPE)rhs.getStart();
	limit = (__DEF_SIZE_TYPE)rhs.getLimit();
	return *this;
}

LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::~LinearSourceDescriptor() {
 }

 typename LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::__SizeType
 LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::getStart()const
 {
    return start;
 }
 
 typename  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::__SizeType 
 LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::getLimit()const
 {
    return limit;
 }
 
 void  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::setStart(__SizeType start)
 {
    this->start=start;
 }
void  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::setLimit(__SizeType limit)
 {
    this->limit=limit;
 }

bool  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::contains(const LinearSourceDescriptor& b)const
{
	return contains(b.getStart(),b.getLimit());
}

bool  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::contains(__SizeType start,__SizeType limit)const
{
#if defined(CODE64)
//	printf("this->start-start>=limit-this->limit   : (%d >= %d = %d)\n",this->start-start,limit-this->limit,(int)(this->start-start)>=(int)(limit-this->limit));
#endif
	return (this->start<=start)&&( limit<=this->limit  && (start - this->start)<=(this->limit - limit));
}
bool  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::operator==(const __LinearSourceDescriptor& b)const
{

   return this->getStart()==b.getStart() && this->getLimit()==b.getLimit();
}
bool  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::operator!=(const __LinearSourceDescriptor& b)const
{
    return ! this->operator==(b);
}
bool  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::isAllocable()const
{
    return true;
}


#undef __DEF_SIZE_TYPE
#undef __DEF_ALIGNMENT
