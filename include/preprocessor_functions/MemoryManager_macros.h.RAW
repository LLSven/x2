
/**
 * @param __DEF_SIZE_TYPE
 * @param __DEF_ALIGNMENT
 */

#if !defined(__DEF_SIZE_TYPE) || !defined(__DEF_ALIGNMENT)
#error "please define __DEF_SIZE_TYPE and/or __DEF_ALIGNMENT"
#endif

#if defined(IDE_MODE)
#include <MemoryManager.h>
#endif

//===class: LinearSourceDescriptor
LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::LinearSourceDescriptor(__SizeType start,__SizeType limit):
 start(start),limit(limit)
 {

 }

LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::~LinearSourceDescriptor() {
 }

 typename LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::__SizeType
 LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::getStart()const
 {
    return start;
 }
 
 typename  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::__SizeType 
 LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::getLimit()const
 {
    return limit;
 }
 
 void  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::setStart(__SizeType start)
 {
    this->start=start;
 }
void  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::setLimit(__SizeType limit)
 {
    this->limit=limit;
 }

bool  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::contains(const LinearSourceDescriptor& b)const
{
	return contains(b.getStart(),b.getLimit());
}

bool  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::contains(__SizeType start,__SizeType limit)const
{
#if defined(CODE64)
//	printf("this->start-start>=limit-this->limit   : (%d >= %d = %d)\n",this->start-start,limit-this->limit,(int)(this->start-start)>=(int)(limit-this->limit));
#endif
	return (this->start<=start)&&( limit<=this->limit  && (start - this->start)<=(this->limit - limit));
}
bool  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::operator==(const __LinearSourceDescriptor& b)const
{

   return this->getStart()==b.getStart() && this->getLimit()==b.getLimit();
}
bool  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::operator!=(const __LinearSourceDescriptor& b)const
{
    return ! this->operator==(b);
}
bool  LinearSourceDescriptor<__DEF_SIZE_TYPE,__DEF_ALIGNMENT>::isAllocable()const
{
    return true;
}


#undef __DEF_SIZE_TYPE
#undef __DEF_ALIGNMENT
