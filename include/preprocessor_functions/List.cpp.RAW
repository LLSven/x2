
/**
 * @param __DEF_ALIGNMENT
 */

#if !defined(__DEF_ALIGNMENT)
#error "please define __DEF_ALIGNMENT"
#endif

#define __DEF_ListNode ListNode<T,__DEF_ALIGNMENT>

template<class T>
__DEF_ListNode::ListNode(const T& data,__ListNode* next,__ListNode* previous):
data(data),
next(next),
previous(previous)
{
}
template<class T>
__DEF_ListNode::~ListNode()
{
    
}
    
template<class T>
typename __DEF_ListNode::__ListNode* __DEF_ListNode::removeNext()
{
    __ListNode* rt=this->getNext();
    if(this->hasNext())
    {
        this->setNext(rt->getNext());
        if(rt->hasNext())
        {
            rt->getNext()->setPrevious(this);
        }
    }
    return rt;
}

template<class T>
typename __DEF_ListNode::__ListNode* __DEF_ListNode::removePrevious()
{
    __ListNode* rt=this->getPrevious();
    if(this->hasPrevious())
    {
        this->setPrevious(rt->getPrevious());
        if(rt->hasPrevious())
        {
            rt->getPrevious()->setNext(this);
        }
    }
    return rt;  
}


template<class T>
void    __DEF_ListNode::insertNext(__ListNode* next)
{
    if(next)
    {
        __ListNode* temp1;
        temp1 = this->getNext();
        if(temp1)
        {
            temp1->setPrevious(next);
        }
        next->setPrevious(this);
        next->setNext(temp1);
        this->setNext(next);
    }
    
    
}

template<class T>
void    __DEF_ListNode::insertPrevious(__ListNode* previous)
{
    if(previous)
    {
        __ListNode* prev=this->getPrevious();
        if(prev)
        {
            prev->setNext(previous);
        }
        previous->setNext(this);
        previous->setPrevious(prev);
        this->setPrevious(previous);
    }
}
template<class T>
void   __DEF_ListNode::adjustOffset(ptrdiff_t diff)
{
	if(this->next!=NULL)
		this->next = (__ListNode*)((char*)this->next + diff);
	if(this->previous!=NULL)
		this->previous = (__ListNode*)((char*)this->previous + diff);
}
template<class T>
void   __DEF_ListNode::initToNull()
{
	next = previous = NULL;
}
template<class T>
typename __DEF_ListNode::__ListNode*   __DEF_ListNode::getLast()const
{
//	Util::printStr("in ListNode getLast\n");
    __ListNode* p=(__ListNode*)this;
    while(p->hasNext())
    {
        p=p->getNext();
    }
//    Util::printStr("in getLast returning \n");
    return p;
}
template<class T>
typename __DEF_ListNode::__ListNode*    __DEF_ListNode::getFirst()const
{
    __ListNode *p=(__ListNode*)this;
    while(p->hasPrevious())
    {
        p=p->getPrevious();
    }
    return p;
}

#undef __DEF_ListNode
#undef __DEF_ALIGNMENT
