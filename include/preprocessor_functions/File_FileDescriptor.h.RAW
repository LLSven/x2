
/**
 * @param __DEF_ALIGNMENT
 */

#if !defined(__DEF_ALIGNMENT)
#error "please define __DEF_ALIGNMENT"
#endif


#pragma pack(push,__DEF_ALIGNMENT)

/**
* 
*/
template <typename __SizeType>
class FileDescriptor<__SizeType,__DEF_ALIGNMENT>
{
public:
	enum{ TYPE_FILE=0,TYPE_DIR=1,TYPE_EAP=2};

	/**
	 * 仅仅是__SizeType的别名
	 */
	typedef __SizeType __TimeType;
public:
	AS_MACRO FileDescriptor(u8_t type,__SizeType sectionList,
			__SizeType fileLen,__SizeType nameStart,__TimeType createdTime,__TimeType lastModefiedTime);

	AS_MACRO u8_t getType()const;
	AS_MACRO void setType(u8_t type);

	AS_MACRO __SizeType getNameOffset()const;
	AS_MACRO void	setNameOffset(__SizeType off);
	AS_MACRO __TimeType getCreatedTime() const;
	AS_MACRO void setCreatedTime(__TimeType createdTime);
	AS_MACRO __SizeType getFileLen() const;
	AS_MACRO void setFileLen(__SizeType fileLen);
	AS_MACRO DEPRECATED __SizeType getFileStart() const;//file will always starts from the beginning
	AS_MACRO DEPRECATED void setFileStart(__SizeType fileStart);
	AS_MACRO __TimeType getLastModefiedTime() const;
	AS_MACRO void setLastModefiedTime(__TimeType lastModefiedTime);
	AS_MACRO DEPRECATED __SizeType getSectionSpan() const;
	AS_MACRO DEPRECATED void setSectionSpan(__SizeType sectionSpan);
	AS_MACRO DEPRECATED __SizeType getSectionStart() const;
	AS_MACRO DEPRECATED void setSectionStart(__SizeType sectionStart);


	AS_MACRO __SizeType getSectionListIndex() const ;
	AS_MACRO void setSectionListIndex(__SizeType	sectionListIndex);

protected:
	/**
	 * 类型，文件，文件夹，或者扩展区域（废弃）
	 */
	u8_t type;

	/**
	 * 文件占据的分区链表的下标
	 */
	__SizeType /* DEPRECATED sectionStart,sectionSpan,*//*DEPRECATED fileStart */sectionListIndex;
	/**
	 * 文件长度
	 */
	__SizeType fileLen;

	/**
	 * 文件名在 name分区中的开始下标
	 */
	__SizeType nameStart;

	/**
	 * 创建时间
	 */
	__TimeType createdTime;

	/**
	 * 最后修改时间
	 */
	__TimeType lastModefiedTime;

};

#pragma pack(pop)


#undef __DEF_ALIGNMENT
