
/**
 * @param __DEF_ALIGNMENT
 */

#if !defined(__DEF_ALIGNMENT)
#error "please define __DEF_ALIGNMENT"
#endif

#define __DEF_TreeNode TreeNode<T,__DEF_ALIGNMENT>

template<class T>
__DEF_TreeNode::TreeNode(const T& data,__TreeNode* father,__TreeNode* son,__TreeNode* next,__TreeNode* previous):
__ListNode(data,next,previous),
son(son),
father(father)
{

}
template<class T>
__DEF_TreeNode::~TreeNode() {
}

//#if defined(CODE64)
//template<class T>
//__TreeNode* __DEF_TreeNode::getSon() const{
//#if defined(CODE64)
//	printf("gettSon not macro\n");
//#endif
//	return son;
//}
//#endif


template<class T>
void __DEF_TreeNode::addSon(__TreeNode* son)
{
//	Util::printStr("in TreeNode addSon \n");
	__TreeNode*	orison=this->getSon();
	if(orison)
	{
		orison->getLast()->insertNext(son);
	}else{
		this->setSon(son);
	}
}
template<class T>
void __DEF_TreeNode::insertSon(__TreeNode* son) {
	if(son!=NULL)
	{
#if defined(CODE64)
//	printf("insertSon 0\n");
#endif
#if defined(CODE64)
//	printf("getSon return\n");
#endif
		__TreeNode *orison=this->getSon();
#if defined(CODE64)
//	printf("insertSon 1\n");
#endif
		this->setSon(son);
#if defined(CODE64)
//	printf("insertSon 2\n");
#endif
		son->setFather(this);
#if defined(CODE64)
//	printf("insertSon 3\n");
#endif
		son->setSon(orison);
		if(orison)
		{
			orison->setFather(son);
		}
	}
}

template<class T>
void __DEF_TreeNode::insertFather(__TreeNode* father) {
	if(father!=NULL)
	{
		__TreeNode *orifather=this->getDirectFather();
		this->setFather(father);
		father->setSon(this);
		father->setFather(orifather);
		if(orifather)
		{
			orifather->setSon(father);
		}
	}
}

template<class T>
typename __DEF_TreeNode::__TreeNode* __DEF_TreeNode::removeSon() {
	if(this->getSon())
	{
		__TreeNode *son=this->getSon()->getSon();
		this->setSon(son);
		son->setFather(this);
		this->getSon()->setFather(NULL);
		this->getSon()->setSon(NULL);

	}
	// TODO 改变返回参数，什么都不返回
	return NULL;
}
template<class T>
void 			__DEF_TreeNode::adjustOffset(ptrdiff_t diff)
{
	this->Father::adjustOffset(diff);
	if(this->father!=NULL)
		this->father = (__TreeNode*)((char*)this->father + diff);
	if(this->son!=NULL)
		this->son = (__TreeNode*)((char*)this->son + diff);
}
template<class T>
void 			__DEF_TreeNode::initToNull()
{
	__ListNode::initToNull();
	father=son=NULL;
}

template<class T>
typename __DEF_TreeNode::__TreeNode* __DEF_TreeNode::removeFather() {
	if(this->getDirectFather())
	{
		__TreeNode *father=this->getDirectFather()->getDirectFather();
		this->setFather(father);
		father->setSon(this);
		this->getDirectFather()->setFather(NULL);
		this->getDirectFather()->setSon(NULL);
	}
	//TODO 返回void
	return NULL;
}

template<class T>
typename __DEF_TreeNode::__TreeNode* __DEF_TreeNode::getParent()const {//往previous一直遍历，直到是跟，然后返回跟的father
	__TreeNode *p=(__TreeNode*)this;
	while(p->hasPrevious())
	{
		p=(__TreeNode*)p->getPrevious();
	}
	return p->getDirectFather();
}


#undef __DEF_TreeNode
#undef __DEF_ALIGNMENT
